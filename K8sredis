#!/bin/bash

# Create project directory
PROJECT_DIR="redis-k8s-ha"
mkdir -p $PROJECT_DIR/kubernetes/{configmaps,secrets,deployments,services,persistent-volumes}

# Function to create files
create_file() {
    local path="$1"
    local content="$2"
    mkdir -p "$(dirname "$path")"
    echo "$content" > "$path"
    echo "Created file: $path"
}

# Secrets
create_file "$PROJECT_DIR/kubernetes/secrets/redis-auth.yaml" '# kubernetes/secrets/redis-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: redis-auth
type: Opaque
stringData:
  master-password: yourStrongMasterPassword
  slave-password: yourStrongSlavePassword'

# ConfigMaps
create_file "$PROJECT_DIR/kubernetes/configmaps/redis-master-config.yaml" '# kubernetes/configmaps/redis-master-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-master-config
data:
  redis.conf: |
    bind 0.0.0.0
    port 6379
    dir /data
    appendonly yes
    appendfsync everysec
    protected-mode no
    requirepass ${MASTER_PASSWORD}
    masterauth ${MASTER_PASSWORD}
    replica-priority 100'

create_file "$PROJECT_DIR/kubernetes/configmaps/redis-slave-config.yaml" '# kubernetes/configmaps/redis-slave-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-slave-config
data:
  redis.conf: |
    bind 0.0.0.0
    port 6379
    dir /data
    appendonly yes
    appendfsync everysec
    protected-mode no
    masterauth ${MASTER_PASSWORD}
    requirepass ${SLAVE_PASSWORD}
    replicaof redis-master 6379
    replica-priority 100
    min-replicas-to-write 1
    min-replicas-max-lag 10'

create_file "$PROJECT_DIR/kubernetes/configmaps/sentinel-config.yaml" '# kubernetes/configmaps/sentinel-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentinel-config
data:
  sentinel.conf: |
    bind 0.0.0.0
    port 26379
    dir "/tmp"
    
    sentinel monitor mymaster redis-master 6379 2
    sentinel down-after-milliseconds mymaster 5000
    sentinel failover-timeout mymaster 60000
    sentinel parallel-syncs mymaster 1
    
    sentinel auth-pass mymaster ${MASTER_PASSWORD}
    
    sentinel resolve-hostnames yes
    sentinel announce-hostnames yes
    
    loglevel verbose
    logfile "/tmp/sentinel.log"'

# Deployments
create_file "$PROJECT_DIR/kubernetes/deployments/redis-master-deployment.yaml" '# kubernetes/deployments/redis-master-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-master
  template:
    metadata:
      labels:
        app: redis-master
    spec:
      containers:
      - name: redis-master
        image: redis:7.2.4
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /usr/local/etc/redis/
        env:
        - name: MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: master-password
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: redis-master-pvc
      - name: config
        configMap:
          name: redis-master-config'

create_file "$PROJECT_DIR/kubernetes/deployments/redis-slave-deployment.yaml" '# kubernetes/deployments/redis-slave-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis-slave
  template:
    metadata:
      labels:
        app: redis-slave
    spec:
      containers:
      - name: redis-slave
        image: redis:7.2.4
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /usr/local/etc/redis/
        env:
        - name: MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: master-password
        - name: SLAVE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: slave-password
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: redis-slave-pvc
      - name: config
        configMap:
          name: redis-slave-config'

create_file "$PROJECT_DIR/kubernetes/deployments/redis-sentinel-deployment.yaml" '# kubernetes/deployments/redis-sentinel-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
    spec:
      containers:
      - name: redis-sentinel
        image: redis:7.2.4
        ports:
        - containerPort: 26379
        volumeMounts:
        - name: config
          mountPath: /usr/local/etc/redis/
        env:
        - name: MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: master-password
        command: ["redis-sentinel", "/usr/local/etc/redis/sentinel.conf"]
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: sentinel-config'

# Services
create_file "$PROJECT_DIR/kubernetes/services/redis-master-service.yaml" '# kubernetes/services/redis-master-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-master
spec:
  selector:
    app: redis-master
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379'

create_file "$PROJECT_DIR/kubernetes/services/redis-slave-service.yaml" '# kubernetes/services/redis-slave-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
spec:
  selector:
    app: redis-slave
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379'

create_file "$PROJECT_DIR/kubernetes/services/redis-sentinel-service.yaml" '# kubernetes/services/redis-sentinel-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
spec:
  selector:
    app: redis-sentinel
  ports:
    - protocol: TCP
      port: 26379
      targetPort: 26379'

# Persistent Volumes
create_file "$PROJECT_DIR/kubernetes/persistent-volumes/redis-master-pv.yaml" '# kubernetes/persistent-volumes/redis-master-pv.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-master-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi'

create_file "$PROJECT_DIR/kubernetes/persistent-volumes/redis-slave-pv.yaml" '# kubernetes/persistent-volumes/redis-slave-pv.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-slave-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi'

# README
create_file "$PROJECT_DIR/README.md" '# Redis High Availability on Kubernetes

## Prerequisites
- Kubernetes Cluster
- kubectl configured

## Deployment Steps
1. Create Secrets, ConfigMaps, and Persistent Volumes
```bash
kubectl apply -f kubernetes/secrets/
kubectl apply -f kubernetes/configmaps/
kubectl apply -f kubernetes/persistent-volumes/
```

2. Deploy Redis Components
```bash
kubectl apply -f kubernetes/services/
kubectl apply -f kubernetes/deployments/
```

## Failover Scenarios

### Master Node Failure
1. Simulate master node failure:
```bash
kubectl delete pod -l app=redis-master
```
- Sentinel will detect master failure
- A slave will be promoted to master
- Other slaves will reconfigure to point to new master

### Network Partition
- Sentinel monitors node health every 5 seconds
- If master becomes unreachable, failover is triggered
- Requires minimum 2 sentinels to agree on master status

### Complete Cluster Recovery
```bash
# Delete all Redis components
kubectl delete deployments --all
kubectl delete services --all
kubectl delete configmaps --all
kubectl delete secrets --all
kubectl delete pvc --all

# Redeploy entire setup
kubectl apply -f kubernetes/
```

## Monitoring
- Check sentinel logs:
```bash
kubectl logs -l app=redis-sentinel
```

- Verify cluster status:
```bash
kubectl get pods
kubectl get services
```'

# Make the script executable if needed
chmod +x "$0"

echo "Redis Kubernetes project structure created successfully in $PROJECT_DIR"






















#!/bin/bash

# Deployment helper script
ACTION=${1:-apply}  # Default to apply, can be delete

# Validate action
if [[ "$ACTION" != "apply" && "$ACTION" != "delete" ]]; then
    echo "Usage: $0 [apply|delete]"
    exit 1
fi

# Deployment order matters
DEPLOY_ORDER=(
    "secrets"
    "configmaps"
    "persistent-volumes"
    "services"
    "deployments"
)

# Base directory
BASE_DIR="kubernetes"

# Perform action
for dir in "${DEPLOY_ORDER[@]}"; do
    echo "===== $ACTION $dir ====="
    kubectl "$ACTION" -f "$BASE_DIR/$dir/"
    sleep 2  # Small pause between deployments
done

# Provide status after deployment/deletion
if [[ "$ACTION" == "apply" ]]; then
    echo "===== Deployment Status ====="
    kubectl get pods
    kubectl get services
    kubectl get pvc
elif [[ "$ACTION" == "delete" ]]; then
    echo "===== Cleanup Complete ====="
fi


# Make the script executable
chmod +x create-redis-k8s-project.sh

# Run the script to generate project
./create-redis-k8s-project.sh

# Navigate to project directory
cd redis-k8s-ha



# Make deployment script executable
chmod +x deploy.sh

# Deploy everything
./deploy.sh apply

# Delete everything
./deploy.sh delete


